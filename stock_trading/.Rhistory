alpha_max <- alfs[maxloc[1]]
}else{
modmax <- logiaagg(b0, b, lam0[maxloc[2]], alfs[maxloc[1]], w, xstd, y, Lad, dl, intercept, maxiter, cri)
lambda_max <- lam0[maxloc[2]]
alpha_max <- alfs[maxloc[1]]
}
}
if(type=='Gaussian'){
if(intercept) {
my <- mean(y)
} else {
my <- 0
}
b0_max <- my-sum(meanx/sdx*modmax)
b_max <- modmax/sdx
}else if(type=='Logistic'){
bbb0 <- modmax[1]
bbb <- modmax[-1]
b0_max <- bbb0-sum(meanx/sdx*bbb)
b_max <- bbb/sdx
}
id1se <- matrix(which(cvmean>cvmean[maxloc[1],maxloc[2]]-cvse[maxloc[1],maxloc[2]],arr.ind=T), ncol = 2)
n_max <- nnzero(b_max)
colnames(id1se) <- c('alpha','lambda')
if(nrow(id1se) == 1) {
mod1se <- modmax
lambda_1se <- lambda_max
alpha_1se <- alpha_max
b0_1se <- b0_max
b_1se <- b_max
n_1se <- n_max
} else {
id1se <- id1se[order(id1se[,1],id1se[,2]),]
id1se <- matrix(id1se[!duplicated(id1se[,1]),], ncol = 2)
n1se <- nrow(id1se)
if(n1se > 1 & any(alfs[id1se[, 1]] == 0)) {
id1se <- matrix(id1se[!alfs[id1se[, 1]] == 0, ], ncol = 2)
}
n1se <- nrow(id1se)
param <- matrix(NA,n1se,2)
for(i in 1:n1se){
if(alfs[id1se[i, 1]] != 0) {
param[i,] <- c(lam0[id1se[i, 2]]/alfs[id1se[i, 1]],alfs[id1se[i, 1]])
} else {
param[i,] <- c(lam0[id1se[i,2]],alfs[id1se[i,1]])
}
}
if(type=='Gaussian'){
mod1semod <- findlr1se(b, w, xstd, ycen, Lad, dl, maxiter, cri, param)
mod1se <- mod1semod$b
lambda_1se <- mod1semod$tune[1]
alpha_1se <- mod1semod$tune[2]
b0_1se <- my-sum(meanx/sdx*mod1se)
b_1se <- mod1se/sdx
}else if(type=='Logistic'){
mod1semod <- findlogi1se(b0_max, b_max, w, xstd, y, Lad, dl, intercept, maxiter, cri, param)
b0 <- mod1semod$b0
b <- mod1semod$bb
b0_1se <- b0-sum(meanx/sdx*b)
b_1se <- b/sdx
lambda_1se <- mod1semod$tune[1]
alpha_1se <- mod1semod$tune[2]
}
n_1se <- mod1semod$npara
}
return(new('cv',lambda=lam0,alpha=alfs,lambda_max=lambda_max,lambda_1se=lambda_1se,
alpha_max=alpha_max,alpha_1se=alpha_1se,cvm=cvmean,cvse=cvse,n_max=n_max,
n_1se=n_1se,intercept_max=b0_max,intercept_1se=b0_1se,coef_max=b_max,coef_1se=b_1se))
}
mod <- cv.glmagraph(Y.train,X.train,L)
library(Rcpp)
library(MASS)
library(survival)
library(glmgraph)
?glmgraph
library(glmnet)
?glmnet
c(0, 0.01 * 2^(0:7))
?case
?switch
mm='deviance'
switch (mm,
1 = 'deviance', 0
)
switch (mm,1 = 'deviance', 0)
switch (mm,'deviance' = 1, 0)
mm='mae'
switch (mm,'deviance' = 1, 0)
meas <- switch(measure, 'deviance' = 1, 2)
measure = 'deviance'
meas <- switch(measure, 'deviance' = 1, 2)
meas
measure='AUC'
switch(measure, 'deviance' = 1, 2)
?ifelse
a <- runif(10)
a
a[3] <- a[7]
a
sort(a)
order(a)
?sample
b <- sample(0:1, 10, T)
a
b
sample(0:1, 10, T)
b <- sample(0:1, 10, T)
b
aord <- order(a)
a0 <- runif(10)
b0 <- sample(0:1, 10, T)
aord <- order(a0)
a0 <- runif(10)
a[3] <- a[7]
b0 <- sample(0:1, 10, T)
a0
b0
a0 <- runif(10)
a0[3] <- a0[7]
b0 <- sample(0:1, 10, T)
a0
b0
aord <- order(a0)
aord
a <- a[aord]
b0 <- b[aord]
a0 <- runif(10)
a0[3] <- a0[7]
b0 <- sample(0:1, 10, T)
a <- a[aord]
b <- b0[aord]
aord <- order(a0)
a
b
a0 <- runif(10)
a0[3] <- a0[7]
b0 <- sample(0:1, 10, T)
aord <- order(a0)
a <- a0[aord]
b <- b0[aord]
a
b
rank(a)
?order
?duplicated
anyDuplicated(a)
duplicated(a)
a0 <- runif(10)
a0[3] <- a0[7]
a0[4] <- a0[9]
b0 <- sample(0:1, 10, T)
aord <- order(a0)
a <- a0[aord]
b <- b0[aord]
duplicated(a)
anyDuplicated(a)
a[duplicated(a)]
which(a == duplicated(a))
which(a == a[duplicated(a)])
a
which(a %in% a[duplicated(a)])
tie1 <- which(a %in% a[duplicated(a)])
a[tie1]
rank(a[tie1])
order(a[tie1])
order(a)[tie1]
rank(a)[tie1]
?rank
rank(a, ties.method = 'first')
rank(a, ties.method = 'first')[tie1]
rank(a, ties.method = 'last')[tie1]
rank(a, ties.method = 'max')[tie1]
rank(a, ties.method = 'min')[tie1]
tie2 <- rank(a, ties.method = 'min')[tie1]
tie3 <- rank(a, ties.method = 'max')[tie2]
tie2
tie3
tie
?duplicated
length(tie0)
anyDuplicated(a)
anyDuplicated(a,T)
anyDuplicated(a,F)
duplicated(a)
tie <- any(duplicated(a))
tie
a0 <- runif(10)
a0[3] <- a0[7]
a0[4] <- a0[9] <- a0[8]
b0 <- sample(0:1, 10, T)
aord <- order(a0)
a <- a0[aord]
b <- b0[aord]
a
tie <- any(duplicated(a))
tie1 <- which(a %in% a[duplicated(a)])
tie2 <- rank(a, ties.method = 'min')[tie1]
tie3 <- rank(a, ties.method = 'max')[tie2]
tie
tie1
tie2
tie3
a0 <- runif(10)
b0 <- sample(0:1, 10, T)
aord <- order(a0)
a <- a0[aord]
b <- b0[aord]
tie1 <- which(a %in% a[duplicated(a)])
tie <- any(duplicated(a))
tie2 <- rank(a, ties.method = 'min')[tie1]
tie3 <- rank(a, ties.method = 'max')[tie2]
tie1
tie2
tie <- any(duplicated(a))
if(tie) {
tie1 <- which(a %in% a[duplicated(a)])
tie2 <- rank(a, ties.method = 'min')[tie1]
tie3 <- rank(a, ties.method = 'max')[tie2]
} else {
tie1 <- tie2 <- tie3 <- 0
}
tie
tie1
exp(.000001)
exp(-.000001)
log(exp(-.000001))
log(exp(-99999))
log(exp(-999))
log(exp(-99))
exp(-997)
exp(10)
log(exp(10))
log(exp(100))
log(exp(1000))
log(exp(600))
log(exp(800))
log(2*exp(10))
log(10*exp(10))
10*exp(10)
exp(100)
exp(-1000)
exp(-900)
exp(-5\00)
exp(-500)
log(exp(-500))
log(exp(-600))
log(exp(-700))
log(exp(-800))
exp(-800)
exp(-7000)
exp(-750)
exp(-740)
log(exp(-740))
exp(-750)
log(exp(-745))
45*27、16、64
45*27/16/64
45*3^8/4^10
.75^10+10*.25*.75^9+45*.25^2*.75^8+120*.25^3*.75^7
?binom.test
read
?fread
library(data.table)
?fread
?read.table
.01*2^(7:0)
load('binares_ind.RData')
load('binres_ind.RData')
41/46
46/41
library(glmnet)
res <- matrix(NA, 10, 11)
colnames(res) <- c('MAE', 'MSE', 'Pearson', 'Spearman', 'Sel_r', 'Sel_Acc', 'Sel_Mcc', 'Sel_Sn_large', 'Sel_Sn_medium', 'Sel_Sn_small', 'Sel_Sp')
rownames(res) <- c('EN', 'Graph_cor', 'Graph_kn', 'Graph_est', 'AAG_cor', 'AAG_kn', 'AAG_est', 'AAGmix_kn', 'AAGmix_est', 'AAGmix_id')
source('F:/dropbox/Dropbox/Rpack/to be package/glmagraph/read result.R')
?sort
?cut
z=rnorm(100)
z
cut(z,breaks=-6:6)
table(cut(z,breaks=-6:6))
cut(rep(1,5),4)
1
rep(1,5)
tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5)
x <- rep(0:8, tx0)
tx0
stopifnot(table(x) == tx0)
?stopifnot
x
table( cut(x, b = 8))
table( cut(x, breaks = 3*(-2:5)))
das <- data.frame(anim=1:15,
wt=c(181,179,180.5,201,201.5,245,246.4,
189.3,301,354,369,205,199,394,231.3))
das
plit(das, cut(das$anim, 3))
split(das, cut(das$anim, 3))
cut(das$anim, 3)
library(Hmisc) # cut2
split(das, cut2(das$wt, g=3))
install.packages('Hmisc')
library(Hmisc) # cut2
split(das, cut2(das$wt, g=3))
cut2(das$wt, g=3)
cut(das$anim, 3)
as.numeric(cut(das$anim, 3))
as.factor( as.numeric( cut(das$wt,3)))
library(dplyr)
install.packages('dplyr')
library(dplyr)
?recode
x <- c(1:4, NA)
recode_factor(x, `1` = "z", `2` = "y", `3` = "x")
recode_factor(x, `1` = 100, `2` = 200, `3` = 300)
recode(x, `1` = 100, `2` = 200, `3` = 300)
recode(x, .missing = mean(x, na.rm = T))
recode(x, .default = .x, .missing = mean(x, na.rm = T))
recode(x, .default = NULL, .missing = mean(x, na.rm = T))
na.aggregate(x)
library(zoo)
install.packages('zoo')
library(zoo)
na.aggregate(x)
aggregate(state.x77, list(Region = state.region), mean)
library(data.table)
library(psycg)
library(psych)
install.packages('psych')
library(psych)
library(dplyr)
library(ggplot2)
library(Hmisc)
library(pROC)
library(OptimalCutpoints)
library(randomForest)
install.packages('randomForest')
install.packages('gbm')
install.packages('randomForestSRC')
install.packages('impute')
source('https://bioconductor.org')
source('https://bioconductor.org/biocLite.R')
biocLite()
biocLite(glimmer)
biocLite(impute)
biocLite('impute')
biocLite('limma')
biocLite('qvalue')
biocLite('e1071')
biocLite('kernlab')
library(JumpTest)
install.packages('JumpTest')
install.packages('sva')
biocLite('sva')
?sva
library(sva)
?sva
install.packages('openxlsx')
library(foreign)
int_draw <- sample(1:100, 100, replace = T)
int_draw
?rbinom
rbinom(1, int_draw, .5)
apply(int_draw, rbinom, n = 1, prob = .5)
?apply
binomvec <- c()
for (i in 1:1000) {
binomvec[i] <- rbinom(1, int_draw, .5)
}
mean(binomvec)
pi/(3*pi-8)
pi/(pi-2)
pi/(6-4*sqrt(3)+pi)
a=c('a','b')
a
a=c('a','b',3)
a
?D
library(devtools)
install.packages('devtools')
install.packages('keras')
install.packages('tensorflow')
library(keras)
data <- dataset_mnist()
install_tensorflow()
install_tensorflow()
library(keras)
library(tensorflow)
install_tensorflow()
library(keras)
library(tensorflow)
data <- dataset_mnist()
library(keras)
data <- dataset_mnist()
source('https://bioconductor.org/biocLite.R')
biocLite()
10*sqrt(101)
10*sqrt(110)
10*sqrt(120)
10*sqrt(150)
122/150
?sample
sample.int(100,20,T)
replicate(sample.int(100,20,T),10)
?replicate
replicate(10,sample.int(100,20,T))
replicate(10,sort(sample.int(100,20,T))
()
)
replicate(10, sort(sample.int(100, 20, T)))
replicate(10, sort(sample.int(100, 20)))
sample(100, 20)
sample(0:99, 20)
sort(sample(0:99, 20))
y=sample(0:1, 20, T)
y
pos <- which(y == 1)
neg <- which(y == 0)
pos
neg
mean(y)
round(.3)
round(.4)
round(.5)
round(.6)
round(.500001)
pos
subn=5
pos <- which(y == 1)
neg <- which(y == 0)
posn <- round(mean(y) * subn)
negn <- subn - posn
posn
neg
negn
y=sample(0:1, 200, T)
subn=120
pos <- which(y == 1)
neg <- which(y == 0)
posn <- round(mean(y) * subn)
negn <- subn - posn
posn
negn
pos
neg
sample(pos, posn)
sample(neg,negn)
sort(sample(pos,posn),sample(neg,neg))
sort(c(sample(pos,posn),sample(neg,neg)))
cvwhich <- replace(nsam, sort(c(sample(pos, posn), sample(neg, negn))))
cvwhich <- replicate(nsam, sort(c(sample(pos, posn), sample(neg, negn))))
nsam=100
cvwhich <- replicate(nsam, sort(c(sample(pos, posn), sample(neg, negn))))
cvwhich
dim(cvwhich)
?replace
y=c(1,1,1)
b=which(y==0)
b
length(b)
library(ggplot2)
prox <- function(x) I(x<-1)*(x+1)+I(x>1)*(x-1)
ggplot() + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
ggplot(data.frame(x = 0), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
prox(-2)
prox(-1)
prox
prox <- function(x) I(x < -1)*(x + 1)+I(x > 1)*(x - 1)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
ggplot() + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-2, 2)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator')
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + theme_bw()
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + theme_bw() + theme(title.position(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(breaks = c(-1, 1), labels = 'lambda') + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(breaks = c(-1, 1), labels = c('\lambda', \lambda)) + theme_bw() + theme(plot.title = element_text(hjust = .5))
express(lambda)
expression(lambda)
expression(alpha)
expression(-alpha)
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox)+ xlim(-2, 2) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(breaks = c(-1, 1), labels = c(expression(-alpha), 'd')) + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-alpha), 'd')) + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda), expression(lambda))) + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda_1), expression(lambda))) + theme_bw() + theme(plot.title = element_text(hjust = .5))
?expression
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda))) + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = element_blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = element_blank(), axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1]))) + theme_bw() + theme(axis.title.x = element_blank(), axis.ticks = element_blank(), axis.title.x = element_text(face = 'bold'), axis.title.y = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = .5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = prox) + ylim(-1, 1) + ggtitle('Proximal Operator') + scale_x_continuous(limits = c(-2, 2), breaks = c(-1, 1), labels = c(expression(-lambda[1]), expression(lambda[1])), face = 'bold') + theme_bw() + theme(axis.title.x = element_blank(), axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = .5))
?scale_x_continuous
183.12+67.58+7.49+45.41+25.32
7.96+73.54+64.19+37.43+7.49+67.58+45.41+25.32
mean(c(3.66,4,4,4,4))
mean(c(3,4,4,4,4))
install.packages('h2o')
library(h2o)
h2o.init()
iris.hex <- as.h2o(iris)
iris.hex
iris.dl <- h2o.deeplearning(x = 1:4, y = 5, training_frame = iris.hex, seed=123456)
# now make a prediction
predictions <- h2o.predict(iris.dl, iris.hex)
predictions
setwd("F:/github/machine_learning/stock_trading")
